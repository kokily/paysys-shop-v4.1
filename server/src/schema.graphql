type ChangePasswordResponse {
  ok: Boolean!
  error: String
}

type Mutation {
  ChangePassword(password: String!): ChangePasswordResponse!
  Login(username: String!, password: String!): LoginResponse!
  Register(username: String!, password: String!): RegisterResponse!
  AddClosed(year: String!, month: String!, users: [InputUser]!): AddClosedResponse!
  RemoveClosed(id: ID!): RemoveClosedResponse!
}

type LoginResponse {
  ok: Boolean!
  error: String
  token: String
}

type MeResponse {
  ok: Boolean!
  error: String
  me: MeType
}

type Query {
  Me: MeResponse!
  ListCloseds(cursor: ID): ListClosedsResponse!
  ReadClosed(id: ID!): ReadClosedResponse!
}

type RegisterResponse {
  ok: Boolean!
  error: String
}

type AddClosedResponse {
  ok: Boolean!
  error: String
}

input InputUser {
  username: String!
  closed_date: [String]
}

type ListClosedsResponse {
  ok: Boolean!
  error: String
  closeds: [Closed]
}

type ReadClosedResponse {
  ok: Boolean!
  error: String
  closed: Closed
}

type RemoveClosedResponse {
  ok: Boolean!
  error: String
}

scalar Date

type Closed {
  id: ID!
  year: String!
  month: String!
  closed_users: [ClosedUser]
  created_at: Date!
}

type ClosedUser {
  id: ID!
  username: String!
  closed_date: [String]
  closedId: String!
  closed: Closed
  created_at: Date!
}

type User {
  id: ID!
  username: String!
  password: String!
  admin: Boolean!
  created_at: Date!
  updated_at: Date
}

type MeType {
  id: ID!
  username: String!
  admin: Boolean!
}

type InputItem {
  id: ID!
  name: String!
  divide: String!
  native: String!
  unit: String!
  price: Int!
  count: Int!
  amount: Int!
}

type Item {
  id: ID!
  num: Int!
  name: String!
  divide: String!
  native: String!
  unit: String!
  price: Int!
  created_at: Date!
  updated_at: Date
}

type Cart {
  id: ID!
  items: [InputItem]!
  completed: Boolean!
  deleted: Boolean!
  created_at: Date!
  updated_at: Date
  user_id: String!
  bill_id: String
}

type Bill {
  id: ID!
  title: String!
  hall: String!
  etc: String!
  total_amount: Int!
  items: [InputItem]
  reserve: Int
  username: String!
  user_id: String!
  cart_id: String!
  created_at: Date!
}

type Wedding {
  id: ID!
  husband: String!
  husband_rental: Int!
  husband_company: Int!
  husband_add: Int!
  husband_today: Int!
  husband_bouquet: Int!
  husband_ceremony: Int!
  husband_hanbok: Int!
  husband_play: Int!
  husband_anthem: Int!
  husband_moderator: Int!
  husband_officiate: Int!
  husband_etc: Int!
  husband_conv: Int!
  husband_wedding: Int!
  husband_num: Int!
  husband_meal: Int!
  husband_present_num: Int!
  husband_present: Int!
  husband_reserve: Int!
  bride: String!
  bride_rental: Int!
  bride_company: Int!
  bride_add: Int!
  bride_today: Int!
  bride_bouquet: Int!
  bride_ceremony: Int!
  bride_hanbok: Int!
  bride_play: Int!
  bride_anthem: Int!
  bride_moderator: Int!
  bride_officiate: Int!
  bride_etc: Int!
  bride_conv: Int!
  bride_wedding: Int!
  bride_num: Int!
  bride_meal: Int!
  bride_present_num: Int!
  bride_present: Int!
  bride_reserve: Int!
  sum_rental: Int!
  sum_company: Int!
  sum_add: Int!
  sum_today: Int!
  sum_bouquet: Int!
  sum_ceremony: Int!
  sum_hanbok: Int!
  sum_play: Int!
  sum_anthem: Int!
  sum_moderator: Int!
  sum_officiate: Int!
  sum_etc: Int!
  sum_conv: Int!
  sum_wedding: Int!
  sum_num: Int!
  sum_meal: Int!
  sum_present_num: Int!
  sum_present: Int!
  reserve_pay: Int!
  meals_price: Int!
  present_price: Int!
  meal: String!
  reserve: String!
  present: String!
  wedding_at: String!
  event_at: String!
  created_at: Date!
  updated_at: Date
  user_id: String!
}
